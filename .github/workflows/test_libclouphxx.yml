name: Test libcloudph++

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

#env:

jobs:
#  build_CUDA:
#    runs-on: ubuntu-20.04
#    strategy:
#      matrix:
#        name: ["CUDA"]
#        build_type: ["Debug", "RelWithDebInfo"]
#        include:
#        - name: "CUDA"
#          disable_cuda: false
#          # not enough RAM to compile Debug CUDA on 4 threads
#          threads: 1
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: build libcloudph++
#      #uses: igfuw/libcloudphxx_build@v0.1-beta
#      uses: ./.github/actions/libcloudphxx_build
#      with:
#        disable_cuda: ${{matrix.disable_cuda}}
#        build_type: ${{matrix.build_type}}
#        threads: ${{matrix.threads}}

  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        name: ["no_CUDA"]
        build_type: ["Debug", "RelWithDebInfo"]
        include:
        - name: "no_CUDA"
          disable_cuda: true
          threads: 4

    steps:
    - uses: actions/checkout@v2

    - name: build libcloudph++
      #uses: igfuw/libcloudphxx_build@v0.1-beta
      uses: ./.github/actions/libcloudphxx_build
      with:
        disable_cuda: ${{matrix.disable_cuda}}
        build_type: ${{matrix.build_type}}
        threads: ${{matrix.threads}}
        path: ${{ github.workspace }}

    # tar build dir before upload as artifact to retain permission and case-sensitive names
    - name: Compress libcloudph++ build
      run: tar -cvf build.tar build

    - name: Upload libcloudph++ build
      uses: actions/upload-artifact@v2
      with:
        name: libcloud_build_${{matrix.build_type}}_tar
        path: build.tar

  # test jobs
#  unit_test:
#    needs: build
#    runs-on: ubuntu-20.04
#
#    strategy:
#      matrix:
#        build_type: ["RelWithDebInfo", "Debug"]
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Download libcloudph++ build
#      uses: actions/download-artifact@v2
#      with:
#        name: libcloud_build_${{matrix.build_type}}_tar
#
#    - name: Decompress libcloudph++ build
#      run: tar -xvf build.tar
#
#    - name: load UWLCM Singularity image
#      #uses: igfuw/libcloudphxx_build@v0.1-beta
#      uses: ./.github/actions/load_UWLCM_singularity_image
#      with:
#        path: ${{ github.workspace }}/singularity_images
#
#    - name: Run unit tests
#      working-directory: ${{github.workspace}}/build
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: OMP_NUM_THREADS=4 singularity exec $SI ctest -C ${{matrix.build_type}} || cat Testing/Temporary/LastTest.log / # "/" intentional! (just to make cat exit with an error code)

  parcel_test:
    needs: build
    runs-on: ubuntu-20.04

    strategy:
      matrix:
      #  build_type: ["RelWithDebInfo", "Debug"]
        build_type: ["Debug"]
        include:
        - build_type: "RelWithDebInfo"
          long_tests: true
          debug_tests: false
        - build_type: "Debug"
          long_tests: false
          debug_tests: true


    steps:
    - uses: actions/checkout@v2

    - name: Download libcloudph++ build
      uses: actions/download-artifact@v2
      with:
        name: libcloud_build_${{matrix.build_type}}_tar

    - name: Decompress libcloudph++ build
      run: tar -xvf build.tar

    - name: load UWLCM Singularity image
      #uses: igfuw/libcloudphxx_build@v0.1-beta
      uses: ./.github/actions/load_UWLCM_singularity_image
      with:
        path: ${{ github.workspace }}/singularity_images

    - name: Install libcloudph++
      run: sudo cmake --install build

    - name: Install python3-gnuplot
      run: |
        wget http://ftp.pl.debian.org/debian/pool/main/p/python-gnuplot/python3-gnuplot_1.8-8_all.deb
        sudo apt install ./python3-gnuplot_1.8-8_all.deb

    - name: checkout parcel repo
      uses: actions/checkout@v2
      with:
        repository: igfuw/parcel
        path: parcel

    - run: mkdir parcel/plots/outputs

    - run: singularity exec -B /usr/local $SI ls /usr/local/lib/python3/dist-packages/

    - name: run parcel tests long
      working-directory: ${{github.workspace}}/parcel
      if: ${{matrix.long_tests}}
      run: |
        singularity exec -B /usr/local $SI py.test-3 -v unit_test
        singularity exec -B /usr/local $SI py.test-3 -v long_test

    - name: run parcel tests debug
      working-directory: ${{github.workspace}}/parcel
      if: ${{matrix.debug_tests}}
      #run: singularity exec -B /usr/local $SI py.test-3 -v unit_test_debug
      run: singularity exec -B /usr/local $SI python3 -m pytest -v unit_test_debug

#  kinematic_2D_test:
#    needs: build
#    runs-on: ubuntu-20.04
#
#    strategy:
#      matrix:
#        build_type: ["RelWithDebInfo"]
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Download libcloudph++ build
#      uses: actions/download-artifact@v2
#      with:
#        name: libcloud_build_${{matrix.build_type}}_tar
#
#    - name: Decompress libcloudph++ build
#      run: tar -xvf build.tar
#
#    - name: Install libcloudph++
#      run: sudo cmake --install build
#
#    - name: load UWLCM Singularity image
#      #uses: igfuw/libcloudphxx_build@v0.1-beta
#      uses: ./.github/actions/load_UWLCM_singularity_image
#      with:
#        path: ${{ github.workspace }}/singularity_images
#
#    - name: checkout libmpdata++ repo
#      uses: actions/checkout@v2
#      with:
#        repository: igfuw/libmpdataxx
#        path: libmpdataxx
#
#    - run: echo ${{ github.workspace }}
#
#    - name: Configure libmpdata++ CMake
#      working-directory: ${{github.workspace}}/libmpdataxx/libmpdata++
#      run: singularity exec $SI cmake -B build
#  
#    - name: Build libmpdata++
#      working-directory: ${{github.workspace}}/libmpdataxx/libmpdata++
#      run: VERBOSE=1 singularity exec $SI cmake --build build 
#
#    - name: Install libmpdata++
#      working-directory: ${{github.workspace}}/libmpdataxx/libmpdata++
#      run: sudo cmake --install build
#
#    - name: Configure kinematic_2D CMake
#      working-directory: ${{github.workspace}}/models/kinematic_2D
#      run: singularity exec -B /usr/local $SI cmake -B build -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
#  
#    - name: Build kinematic_2D 
#      working-directory: ${{github.workspace}}/models/kinematic_2D
#      run: VERBOSE=1 singularity exec -B /usr/local $SI cmake --build build --config ${{matrix.build_type}} 
#
#    - name: Run kinematic_2D tests
#      working-directory: ${{github.workspace}}/models/kinematic_2D/build
#      run: |
#        singularity exec -B /usr/local $SI ctest -VV -R travis # compare icicle results against reference data (done for full simulation for bulk schemes and a couple of steps for lagrangian)
#        singularity exec -B /usr/local $SI cat Testing/Temporary/LastTest.log

#  build_and_test_KiD-A:
#    runs-on: ubuntu-20.04
#    strategy:
#      matrix:
#        name: ["no_CUDA"]
#        build_type: ["RelWithDebInfo"]
#        include:
#        - name: "no_CUDA"
#          disable_cuda: true
#          threads: 4
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: merge with the KiD-A branch
#      uses: devmasx/merge-branch@1.4.0
#      with:
#        type: now
#        target_branch: kida-1d
#        github_token: ${{ github.token }}
#
#    - name: build libcloudph++
#      #uses: igfuw/libcloudphxx_build@v0.1-beta
#      uses: ./.github/actions/libcloudphxx_build
#      with:
#        disable_cuda: ${{matrix.disable_cuda}}
#        build_type: ${{matrix.build_type}}
#        threads: ${{matrix.threads}}
#        path: ${{ github.workspace }}
#
#    - name: Install libcloudph++
#      run: sudo cmake --install build
#
#    - name: checkout KiD-libcloud repo
#      uses: actions/checkout@v2
#      with:
#        repository: igfuw/kid-libcloud
#        path: kid-libcloud
#
#    - name: run KiD LWP test
#      run: \ # TODO


#    - name: Install Nvidia driver
#      if: ${{!matrix.disable_cuda}}
#      run: sudo apt install --no-install-recommends nvidia-driver-470
#    
#    - name: Install Singularity
#      #when installed from this action, .SIF is always converted to sandbox (could be related to: https://githubmemory.com/repo/hpcng/singularity/issues/6065)
#      uses: eWaterCycle/setup-singularity@v6
#      with:
#        singularity-version: 3.7.1
#      #apt installation following https://sylabs.io/guides/3.0/user-guide/installation.html, but this is a too old version and uninstalls python-is-python3
##      run: |
##        wget -O- http://neuro.debian.net/lists/focal.de-fzj.libre | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
##        sudo apt-key adv --recv-keys --keyserver hkps://keyserver.ubuntu.com 0xA5D32F012649A5A9
##        sudo apt-get update
##        sudo apt-get install -y singularity-container
#            
#    - name: Cache UWLCM Singularity image
#      id: cache_singularity
#      uses: actions/cache@v2
#      with:
#        path: '${{ github.workspace }}/singularity_images/uwlcm_ubuntu_20_04_cuda_11_4.sif'
#        key: 'sng_ubuntu_20_04_cuda_11_4'
#        
#    - name: Download UWLCM Singularity image
#      if: steps.cache_singularity.outputs.cache-hit != 'true'
#      run: |
#        mkdir '${{ github.workspace }}/singularity_images'
#        singularity pull --disable_cache --dir '${{ github.workspace }}/singularity_images' library://pdziekan/default/uwlcm:ubuntu_20_04_cuda_11_4
#      # disable Singularity cache, we cache manually
#
#    - name: Set friendly Singularity image name
#      uses: allenevans/set-env@v2.0.0
#      with:
#        SI: '${{ github.workspace }}/singularity_images/uwlcm_ubuntu_20_04_cuda_11_4.sif'
#      
#    - name: Configure CMake
#      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#      run: singularity exec $SI cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DLIBCLOUDPHXX_FORCE_MULTI_CUDA=True -DLIBCLOUDPHXX_DISABLE_CUDA=${{matrix.disable_cuda}}
##
#    - name: Build libcloudph++
#      # Build your program with the given configuration
#      run: VERBOSE=1 singularity exec $SI cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} -j${{matrix.threads}}
      
      
 #   - name: Run Singularity shell
 #     run: singularity shell '${{ github.workspace }}/singularity_images/uwlcm_ubuntu_20_04_cuda_11_1_1.0.sif'
        
#    - name: Download UWLCM Singularity container
#      run: wget https://github.com/igfuw/UWLCM/blob/0fc77ec68053936e36eea4b49f11b3dd2cb1a827/singularity/sng_ubuntu_20_04_cuda_11_1
        
#    - name: Build UWLCM Singularity container
#      run: singularity build sng_ubuntu_20_04_cuda_11_1.sif sng_ubuntu_20_04_cuda_11_1
    
    # TODO: cache cuda-toolki
    
    #- name: Install cuda-toolkit
    #  id: cuda-toolkit
    #  uses: Jimver/cuda-toolkit@v0.2.4
    #  with:
    #    linux-local-args: '["--toolkit"]'

  #  - name: Install boost
  #    uses: MarkusJx/install-boost@v2.0.0
  #    id: install-boost
  #    with:
  #      # REQUIRED: Specify the required boost version
  #      # A list of supported versions can be found here: 
  #      # https://github.com/actions/boost-versions/blob/main/versions-manifest.json
  #      boost_version: 1.73.0
  #      # OPTIONAL: Specify a platform version
  #      #platform_version: 18.04
  #      # OPTIONAL: Specify a custom install location
  #      #boost_install_dir: /home/runner/some_directory
  
#    - name: Install Thrust
#      #run: sudo apt-get install libthrust-dev
#      run: |
#        git clone --depth=1 git://github.com/thrust/thrust.git --branch 1.9.10-1
#        sudo ln -s `pwd`/thrust/thrust /usr/local/include/thrust
        
#    - name: Cache Boost
#      uses: actions/cache@v2
#      with:
#        path: '${{ runner.workspace }}/boost_*.tar.gz'
#        key: 'boost-1.72.0'

 #   - name: Build Boost
 #     id: boost
 #     # This won't re-download the archive unnecessarily:
 #     uses: egor-tensin/build-boost@v1
 #     with:
 #       version: 1.72.0
 #       libraries: date_time # in fact we don't need any compiled libs, only header libs, but when nothing is passed all libs are built
 #       platform: x64
 #       configuration: RelWithDebInfo
      
    #- name: Install hdf5 (Linux)
    #  run: sudo apt-get install libhdf5-dev
    #  #if: matrix.os == 'ubuntu-latest'
      
